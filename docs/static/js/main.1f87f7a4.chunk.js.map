{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifRead.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifRead","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mMAmCeA,EAhCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAiBzC,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAlBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCRdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAAUH,GADpF,qBAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARjB,kBAYdM,GAZc,4CAAH,sDCWLO,EATK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAChC,OACE,sBAAKc,UAAU,8CAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCoBKO,EAnBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECJN,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAK,SAAAC,GACJH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGd,IAEIC,EDV2BK,CAAa1B,GAAjCa,EAFkB,EAExBN,KAAca,EAFU,EAEVA,QAEtB,OACE,qCACE,+BAAKpB,EAAL,OACCoB,GAAW,4CACZ,qBAAKJ,UAAU,YAAf,SAEIH,EAAOJ,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEWnBgB,EAxBM,WAAO,IAAD,EAEWzC,mBAAS,CAAC,cAFrB,mBAElB0C,EAFkB,KAEN3C,EAFM,KAIzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEI2C,EAAWnB,KAAI,SAACT,EAAU6B,GAAX,OACb,cAAC,EAAD,CAEE7B,SAAUA,GADLA,Y,MCbnB8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1f87f7a4.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst CategoryAdd = ({ setCategories }) => {\n  // se debe inicializar con un string vacio para que no sea uncontrolled component\n  const [inputValue, setInputValue] = useState('')\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value)\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (inputValue.trim().length > 2) {\n      setCategories(cats => [inputValue, ...cats])\n      setInputValue('')\n    }\n\n  }\n\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  )\n}\n\nCategoryAdd.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\nexport default CategoryAdd\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=JvBm02Lp0iTMFI17qH9x02gNu1R0VEaH&q=${encodeURI(category)}&limit=5`\n  const resp = await fetch(url)\n  const { data } = await resp.json()\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n  // console.log(data)\n  return gifs\n}","import React from 'react'\n\nconst GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeInRight\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )\n}\n\nexport default GifGridItem\n","import React from 'react'\n// hooks\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\n//  components\nimport GifGridItem from './GifGridItem'\n\nconst GifRead = ({ category }) => {\n\n  const { data: images, loading } = useFetchGifs(category)\n\n  return (\n    <>\n      <h3>{category} </h3>\n      {loading && <p>Loading....</p>}\n      <div className=\"card-grid\">\n        {\n          images.map(img => (\n            <GifGridItem key={img.id} {...img} />\n          ))\n        }\n      </div>\n    </>\n  )\n}\n\nexport default GifRead\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  })\n\n  useEffect(() => {\n    getGifs(category)\n      .then(imgs => {\n        setState({\n          data: imgs,\n          loading: false\n        })\n      })\n  }, [])\n\n  return state\n}\n","import React, { useState } from 'react'\n// Components\nimport AddCategory from './components/CategoryAdd'\nimport GifRead from './components/GifRead'\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch'])\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {\n          categories.map((category, i) =>\n            <GifRead\n              key={category}\n              category={category}\n            />\n          )\n        }\n      </ol>\n    </>\n  )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}